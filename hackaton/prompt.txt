# Table of Contents
- manage.py
- hackaton/settings.py
- hackaton/__init__.py
- hackaton/asgi.py
- hackaton/wsgi.py
- hackaton/urls.py
- hotel/__init__.py
- hotel/views.py
- hotel/models.py
- hotel/admin.py
- hotel/apps.py
- hotel/urls.py
- hotel/tests.py
- hotel/migrations/__init__.py
- hotel/migrations/0001_initial.py
- hotel/templates/hotel/home.html

## File: manage.py

- Extension: .py
- Language: python
- Size: 664 bytes
- Created: 2025-05-17 16:55:13
- Modified: 2025-05-17 16:55:13

### Code

```python
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hackaton.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

```

## File: hackaton/settings.py

- Extension: .py
- Language: python
- Size: 3181 bytes
- Created: 2025-05-17 17:34:40
- Modified: 2025-05-17 17:34:40

### Code

```python
"""
Django settings for hackaton project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$v9=m^xpqx55&n9&1=ugeo=ogx5+z&_y$pb%9gqy#jm-^@^a#v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'hotel',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'hackaton.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.templates.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hackaton.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

```

## File: hackaton/__init__.py

- Extension: .py
- Language: python
- Size: 0 bytes
- Created: 2025-05-17 16:55:13
- Modified: 2025-05-17 16:55:13

### Code

```python

```

## File: hackaton/asgi.py

- Extension: .py
- Language: python
- Size: 393 bytes
- Created: 2025-05-17 16:55:13
- Modified: 2025-05-17 16:55:13

### Code

```python
"""
ASGI config for hackaton project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hackaton.settings')

application = get_asgi_application()

```

## File: hackaton/wsgi.py

- Extension: .py
- Language: python
- Size: 393 bytes
- Created: 2025-05-17 16:55:13
- Modified: 2025-05-17 16:55:13

### Code

```python
"""
WSGI config for hackaton project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hackaton.settings')

application = get_wsgi_application()

```

## File: hackaton/urls.py

- Extension: .py
- Language: python
- Size: 810 bytes
- Created: 2025-05-17 17:08:41
- Modified: 2025-05-17 17:08:41

### Code

```python
"""
URL configuration for hackaton project.

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/5.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('hotel.urls')),
]

```

## File: hotel/__init__.py

- Extension: .py
- Language: python
- Size: 0 bytes
- Created: 2025-05-17 16:55:35
- Modified: 2025-05-17 16:55:35

### Code

```python

```

## File: hotel/views.py

- Extension: .py
- Language: python
- Size: 101 bytes
- Created: 2025-05-17 17:32:07
- Modified: 2025-05-17 17:32:07

### Code

```python
from django.shortcuts import render

def home(request):
    return render(request, 'hotel/home.html')
```

## File: hotel/models.py

- Extension: .py
- Language: python
- Size: 253 bytes
- Created: 2025-05-17 17:02:34
- Modified: 2025-05-17 17:02:34

### Code

```python
from django.db import models

class Hotel(models.Model):
    name = models.CharField(max_length=100)
    address = models.CharField(max_length=200)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.name
```

## File: hotel/admin.py

- Extension: .py
- Language: python
- Size: 63 bytes
- Created: 2025-05-17 16:55:35
- Modified: 2025-05-17 16:55:35

### Code

```python
from django.contrib import admin

# Register your models here.

```

## File: hotel/apps.py

- Extension: .py
- Language: python
- Size: 142 bytes
- Created: 2025-05-17 16:55:35
- Modified: 2025-05-17 16:55:35

### Code

```python
from django.apps import AppConfig


class HotelConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'hotel'

```

## File: hotel/urls.py

- Extension: .py
- Language: python
- Size: 106 bytes
- Created: 2025-05-17 17:41:23
- Modified: 2025-05-17 17:41:23

### Code

```python
from django.urls import path
from . import views

urlpatterns = [
    path('', views.home, name='home'),
]
```

## File: hotel/tests.py

- Extension: .py
- Language: python
- Size: 60 bytes
- Created: 2025-05-17 16:55:35
- Modified: 2025-05-17 16:55:35

### Code

```python
from django.test import TestCase

# Create your tests here.

```

## File: hotel/migrations/__init__.py

- Extension: .py
- Language: python
- Size: 0 bytes
- Created: 2025-05-17 16:55:35
- Modified: 2025-05-17 16:55:35

### Code

```python

```

## File: hotel/migrations/0001_initial.py

- Extension: .py
- Language: python
- Size: 624 bytes
- Created: 2025-05-17 17:02:46
- Modified: 2025-05-17 17:02:46

### Code

```python
# Generated by Django 5.2.1 on 2025-05-17 14:02

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
    ]

```

## File: hotel/templates/hotel/home.html

- Extension: .html
- Language: html
- Size: 123 bytes
- Created: 2025-05-17 17:13:13
- Modified: 2025-05-17 17:06:20

### Code

```html
<!DOCTYPE html>
<html>
<head>
    <title>Hotel Web</title>
</head>
<body>
    <h1>Welcome to Hotel Web</h1>
</body>
</html>
```

